#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct node
{
    int info;
    struct node*link;
};
typedef struct node*NODE;
NODE getnode(void)
{
    NODE x;
    x=(NODE)malloc(sizeof(struct node));
    if(x==NULL)
    {
        printf("out of memory\n");
        exit(0);
    }
    return x;
}
NODE insertrear(int item,NODE first)
{
    NODE temp,cur;
    temp=getnode();
    temp->info=item;
    temp->link=NULL;
    if(first==NULL)
    {
        return temp;
    }
    cur=first;
    while(cur->link!=NULL)
    {
        cur=cur->link;
    }
    cur->link=temp;
    return first;
}
NODE deleteitem(NODE first,int item)
{
    NODE pre,cur;
    if(first==NULL)
    {
        printf("list is empty\n");
        return first;
    }
    pre=NULL;
    cur=first;
    while(cur!=NULL && item!=cur->info)
    {
        pre=cur;
        cur=cur->link;
    }
    if(cur==NULL)
    {
        printf("the item to be deleted not found in list\n");
        return first;
    }
    pre->link=cur->link;
    free(cur);
    return first;
}
void display(NODE first)
{
    NODE temp;
    if(first==NULL)
    {
        printf("list is empty\n");
        return ;
    }
    printf("the content of list ");
    temp=first;
    while(temp!=NULL)
    {
        printf("%d ",temp->info);
        temp=temp->link;

    }
    printf("\n");
}
int main()
{
    NODE first=NULL;
    int choice,item,n,i;
    for(;;)
    {
        printf("1:create list 2:delete specified item\n");
        printf("3:display 4:exit\n");
        printf("enter choice\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:printf("enter the no. of nodes to create list\n");
            scanf("%d",&n);
            for(i=1;i<n;i++)
            {
                printf("enter the item %d to be inserted\n",i);
                scanf("%d",&item);
                first=insertrear(item,first);
            }
            break;
            case 2:printf("enter the item to be deleted\n");
            scanf("%d",&item);
            first=deleteitem(first,item);
            break;
            case 3:display(first);
            break;
            case 4:printf("exit\n");
                exit(0);
                break;
            default:printf("invalid choice\n");
                exit(0);

        }
    }
    return 0;   
}
